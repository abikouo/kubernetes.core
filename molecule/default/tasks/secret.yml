---
- block:
    - set_fact:
        secret_namespace: "secrets"

    - name: Ensure namespace exists
      k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ secret_namespace }}"

    # TLS Secrets
    - name: Create temporary directory for file to generate
      tempfile:
        state: directory
      register: _tmp_dir

    - name: Generate 2048 bytes size self signed certificate
      k8s_molecule_x509_cert:
        path: "{{ _tmp_dir.path }}"
        prefix: "2048_"
        x509_size: 2048
        x509_validity: 2
      register: _2048_cert
      ignore_errors: true

    - name: Generate 4096 bytes size self signed certificate
      k8s_molecule_x509_cert:
        path: "{{ _tmp_dir.path }}"
        prefix: "4096_"
        x509_size: 4096
        x509_validity: 4
      register: _4096_cert
      ignore_errors: true

    - name: Create TLS secret without tls_data
      kubernetes.core.k8s_secret:
        name: tls-secret
        namespace: "{{ secret_namespace }}"
        type: tls
      ignore_errors: true
      register: tls_secret

    - name: Assert that secret was not created due to missing parameters
      assert:
        that:
          - tls_secret is failed
          - tls_secret.msg is match("type is tls but all of the following are missing(.*)")

    - block:
        - name: Create TLS secret with key not matching certificate
          kubernetes.core.k8s_secret:
            name: tls-secret
            namespace: "{{ secret_namespace }}"
            type: tls
            tls_certificate:
              certificate: "{{ _tmp_dir.path }}/2048_certificate.pem"
              private_key: "{{ _tmp_dir.path }}/4096_private_key.pem"
          ignore_errors: true
          register: tls_secret

        - name: Assert that secret was not created due to unmatching key for certificate
          assert:
            that:
              - tls_secret is failed
              - 'tls_secret.msg == "failed to load key pair tls: private key does not match public key."'

        - name: Create TLS secret (check_mode=true)
          kubernetes.core.k8s_secret:
            name: tls-secret
            namespace: "{{ secret_namespace }}"
            type: tls
            tls_certificate:
              certificate: "{{ _tmp_dir.path }}/2048_certificate.pem"
              private_key: "{{ _tmp_dir.path }}/2048_private_key.pem"
          check_mode: true
          register: tls_secret

        - name: Assert that secret was not created due to unmatching key for certificate
          assert:
            that:
              - tls_secret is changed
              - tls_secret.result.kind == 'Secret'
              - tls_secret.result.metadata.name == 'tls-secret'
              - tls_secret.result.type == 'kubernetes.io/tls'
              - tls_secret.result.data["tls.crt"] == _2048_cert.cert
              - tls_secret.result.data["tls.key"] == _2048_cert.key

        - name: Create TLS secret
          kubernetes.core.k8s_secret:
            name: tls-secret
            namespace: "{{ secret_namespace }}"
            type: tls
            tls_certificate:
              certificate: "{{ _tmp_dir.path }}/2048_certificate.pem"
              private_key: "{{ _tmp_dir.path }}/2048_private_key.pem"
          register: tls_secret

        - name: Assert that secret was not created due to unmatching key for certificate
          assert:
            that:
              - tls_secret is changed

        - name: Read Secret
          kubernetes.core.k8s_info:
            kind: Secret
            namespace: "{{ secret_namespace }}"
            name: tls-secret
          register: _secret

        - name: Validate that secret was created
          assert:
            that:
              - _secret.resources | length == 1
              - _secret.resources[0].type == 'kubernetes.io/tls'
              - _secret.resources[0].data["tls.crt"] == _2048_cert.cert
              - _secret.resources[0].data["tls.key"] == _2048_cert.key

        - name: Delete secret (check_mode=true)
          kubernetes.core.k8s_secret:
            name: tls-secret
            namespace: "{{ secret_namespace }}"
            state: absent
          check_mode: true
          register: _delete

        - name: Validate that delete task result is changed
          assert:
            that:
              - _delete is changed

        - name: Read Secret
          kubernetes.core.k8s_info:
            kind: Secret
            namespace: "{{ secret_namespace }}"
            name: tls-secret
          register: _secret

        - name: Validate that secret still exists
          assert:
            that:
              - _secret.resources | length == 1

        - name: Delete secret
          kubernetes.core.k8s_secret:
            name: tls-secret
            namespace: "{{ secret_namespace }}"
            state: absent
          register: _delete

        - name: Read Secret
          kubernetes.core.k8s_info:
            kind: Secret
            namespace: "{{ secret_namespace }}"
            name: tls-secret
          register: _secret

        - name: Validate that secret was deleted
          assert:
            that:
              - _delete is changed
              - _secret.resources == []

      when:
        - _2048_cert is successful
        - _4096_cert is successful

    # Generic Secrets
    - name: create opaque secret with no data
      kubernetes.core.k8s_secret:
        name: opaque-secret
        namespace: "{{ secret_namespace }}"
        type: generic

    - name: Describe secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: opaque-secret
        namespace: "{{ secret_namespace }}"
      register: _opaque

    - assert:
        that:
          - _opaque.resources | length == 1
          - '_opaque.resources.0.type == "opaque"'
          - _opaque.resources.0.data | default([]) == []

    - name: Create Secret once again with some literals value
      kubernetes.core.k8s_secret:
        name: opaque-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        literals:
          key1: value1
          key2: value2
      register: _exists

    - name: assert that secret was not overriden
      assert:
        that:
          - not _exists.changed
          - '_exists.msg == "The secret {{ secret_namespace }}/opaque-secret already exists, use option force to override it."'

    - name: Create Secret once again with some literals value (force=true)
      kubernetes.core.k8s_secret:
        name: opaque-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        literals:
          key1: value1
          key2: value2
        force: true
      register: _force

    - name: assert that secret was overriden
      assert:
        that:
          - _force is changed

    - name: Describe secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: opaque-secret
        namespace: "{{ secret_namespace }}"
      register: _opaque

    - assert:
        that:
          - _opaque.resources | length == 1
          - '_opaque.resources.0.type == "opaque"'
          - "'key1' in _opaque.resources.0.data"
          - "_opaque.resources.0.data.key1 | b64decode == 'value1'"
          - "'key2' in _opaque.resources.0.data"
          - "_opaque.resources.0.data.key2 | b64decode == 'value2'"

    # Service account token
    - name: Create service account token without required annotation
      kubernetes.core.k8s_secret:
        name: sa-token-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/service-account-token
      ignore_errors: true
      register: token_secret

    - name: validate that service account token cannot be created without required label
      assert:
        that:
          - token_secret is failed
          - token_secret.msg == "the kubernetes.io/service-account.name annotation is required to create 'kubernetes.io/service-account-token' secret type."

    - name: Create service account token with required labels (missing service account)
      kubernetes.core.k8s_secret:
        name: sa-token-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/service-account-token
        annotations:
          kubernetes.io/service-account.name: ansible-executor
      register: token_secret

    - name: Describe token secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: sa-token-secret
        namespace: "{{ secret_namespace }}"
      register: describe_secret

    - name: validate that the secret was not created (missing service account) even if task reported change
      assert:
        that:
          - token_secret is changed
          - describe_secret.resources | length == 0

    - name: Create service account
      kubernetes.core.k8s:
        name: ansible-executor
        namespace: "{{ secret_namespace }}"
        kind: ServiceAccount

    - name: Create service account token
      kubernetes.core.k8s_secret:
        name: sa-token-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/service-account-token
        annotations:
          kubernetes.io/service-account.name: ansible-executor
      register: token_secret

    - name: add role to service account
      kubernetes.core.k8s:
        namespace: "{{ secret_namespace }}"
        name: pod-reader
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          rules:
            - apiGroups: [""]
              resources: ["pods"]
              verbs: ["list"]

    - name: Create Role Binding
      kubernetes.core.k8s:
        namespace: "{{ secret_namespace }}"
        name: "pod-reader-binding"
        definition:
          kind: RoleBinding
          apiVersion: "rbac.authorization.k8s.io/v1"
          subjects:
            - kind: ServiceAccount
              name: ansible-executor
              namespace: "{{ secret_namespace }}"
              apiGroup: ""
          roleRef:
            kind: Role
            name: pod-reader
            namespace: "{{ secret_namespace }}"
            apiGroup: ""

    - name: Describe token secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: sa-token-secret
        namespace: "{{ secret_namespace }}"
      register: describe_secret

    - name: validate that the secret was not created (missing service account) even if task reported change
      assert:
        that:
          - token_secret is changed
          - describe_secret.resources | length == 1
          - "'kubernetes.io/service-account.uid' in describe_secret.resources.0.metadata.annotations"
          - "'ca.crt' in describe_secret.resources.0.data"
          - "'token' in describe_secret.resources.0.data"

    - name: Get cluster information
      kubernetes.core.k8s_cluster_info:
      register: cluster_info
      no_log: true

    - set_fact:
        cluster_host: "{{ cluster_info['connection']['host'] }}"

    - name: access to cluster using api token secret
      kubernetes.core.k8s_info:
        api_key: "{{ describe_secret.resources.0.data.token | b64decode }}"
        host: "{{ cluster_host }}"
        validate_certs: no
        namespace: "{{ secret_namespace }}"
        kind: Pod
        version: v1

    - name: Delete service account created
      kubernetes.core.k8s:
        name: ansible-executor
        namespace: "{{ secret_namespace }}"
        kind: ServiceAccount
        state: absent

    # Basic authentication Secret
    - name: Create auth secret without required fields
      kubernetes.core.k8s_secret:
        name: basic-auth-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/basic-auth
      ignore_errors: true
      register: basic_secret

    - name: validate that task failed
      assert:
        that:
          - basic_secret is failed
          - basic_secret.msg == "the data field of must contain one of the following keys 'username', 'password' when creating 'kubernetes.io/basic-auth' secret type."

    - name: Create auth secret with username only
      kubernetes.core.k8s_secret:
        name: basic-auth-username-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/basic-auth
        literals:
          username: ansible
      register: auth_username_secret

    - name: Describe basic auth secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: basic-auth-username-secret
        namespace: "{{ secret_namespace }}"
      register: describe_secret

    - name: validate that the secret was created
      assert:
        that:
          - auth_username_secret is changed
          - describe_secret.resources | length == 1
          - describe_secret.resources.0.data.username | b64decode == 'ansible'

    - name: Create auth secret with password only
      kubernetes.core.k8s_secret:
        name: basic-auth-pwd-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/basic-auth
        literals:
          password: testing123
      register: auth_pwd_secret

    - name: Describe basic auth secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: basic-auth-pwd-secret
        namespace: "{{ secret_namespace }}"
      register: describe_secret

    - name: validate that the secret was created
      assert:
        that:
          - auth_pwd_secret is changed
          - describe_secret.resources | length == 1
          - describe_secret.resources.0.data.password | b64decode == 'testing123'

    - name: Create auth secret with username and password
      kubernetes.core.k8s_secret:
        name: basic-auth-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/basic-auth
        literals:
          username: ansible
          password: testing123
      register: basic_auth_secret

    - name: Describe basic auth secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: basic-auth-secret
        namespace: "{{ secret_namespace }}"
      register: describe_secret

    - name: validate that the secret was created
      assert:
        that:
          - basic_auth_secret is changed
          - describe_secret.resources | length == 1
          - describe_secret.resources.0.data.username | b64decode == 'ansible'
          - describe_secret.resources.0.data.password | b64decode == 'testing123'

    # SSH authentication secrets
    - name: Create ssh auth secret without required fields
      kubernetes.core.k8s_secret:
        name: ssh-auth-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/ssh-auth
      ignore_errors: true
      register: ssh_secret

    - name: validate that task failed
      assert:
        that:
          - ssh_secret is failed
          - ssh_secret.msg == "the data field of must contain the following key 'ssh-privatekey' when creating 'kubernetes.io/ssh-auth' secret type."

    - set_fact:
        ssh_private_key: "MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQDZthIpWAX4v2Sz"

    - name: Create ssh auth secret without required fields
      kubernetes.core.k8s_secret:
        name: ssh-auth-secret
        namespace: "{{ secret_namespace }}"
        type: generic
        generic_secret_type: kubernetes.io/ssh-auth
        literals:
          ssh-privatekey: "{{ ssh_private_key }}"
      register: ssh_secret

    - name: Describe basic auth secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: ssh-auth-secret
        namespace: "{{ secret_namespace }}"
      register: describe_secret

    - name: validate that the secret was created
      assert:
        that:
          - ssh_secret is changed
          - describe_secret.resources | length == 1
          - describe_secret.resources.0.data['ssh-privatekey'] | b64decode == ssh_private_key

    # Docker registry secret (using type=docker-registry)
    - name: define docker login information
      set_fact:
        docker_server: "registry.server.com"
        docker_username: "ansible"
        docker_password: "testing123!"

    - name: Create docker-registry secret
      kubernetes.core.k8s_secret:
        name: docker-secret
        namespace: "{{ secret_namespace }}"
        type: docker-registry
        docker_registry_credentials:
          server: "{{ docker_server }}"
          username: "{{ docker_username }}"
          password: "{{ docker_password }}"

    - name: Describe docker secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: docker-secret
        namespace: "{{ secret_namespace }}"
      register: _docker

    - name: Validate secret created
      assert:
        that:
          - _docker.resources | length == 1
          - _docker.resources.0.type == "kubernetes.io/dockerconfigjson"
          - "'auths' in secret_data"
          - secret_data['auths']['{{ docker_server }}'].username == docker_username
          - secret_data['auths']['{{ docker_server }}'].password == docker_password
      vars:
        secret_data: "{{ _docker.resources.0.data['.dockerconfigjson'] | b64decode | from_json }}"

    # Docker registry secret (using type=generic and generic_secret_type)
    - name: Create docker-registry secret (without required fields)
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: docker-registry-from-config
        type: generic
        generic_secret_type: kubernetes.io/dockerconfigjson
      register: _create
      ignore_errors: true

    - name: validate that task failed
      assert:
        that:
          - _create is failed
          - _create.msg == "the data field of must contain the following key '.dockerconfigjson' when creating 'kubernetes.io/dockerconfigjson' secret type."

    - name: Create docker-registry secret
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: docker-registry-from-config
        type: generic
        generic_secret_type: kubernetes.io/dockerconfigjson
        from_path:
          name: .dockerconfigjson
          path: docker_config.json
      register: _create

    - name: Describe docker secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: docker-registry-from-config
        namespace: "{{ secret_namespace }}"
      register: _describe

    - name: Validate secret created
      assert:
        that:
          - _create is changed
          - _describe.resources | length == 1
          - _describe.resources.0.type == "kubernetes.io/dockerconfigjson"
          - "'.dockerconfigjson' in _describe.resources.0.data"
          - _describe.resources.0.data['.dockerconfigjson'] | b64decode | from_json == lookup('file', 'docker_config.json') | from_json

    # Create secrets using 'from_path' different configuration
    - name: Create secret using from_path set as non existing file
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: secret-from-file
        type: generic
        from_path: this_file_is_not_part_of_the_test_suite
      register: _create
      ignore_errors: true

    - name: Validate that secret was not created
      assert:
        that:
          - _create is failed
          - _create.msg == "this_file_is_not_part_of_the_test_suite does not exist in local filesystem"

    - name: Create secret using from_path set as file
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: secret-from-file
        type: generic
        from_path: files/opaque_secret.txt
      register: _create

    - name: Describe docker secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: secret-from-file
        namespace: "{{ secret_namespace }}"
      register: _describe

    - name: Validate secret created
      assert:
        that:
          - _create is changed
          - _describe.resources | length == 1
          - _describe.resources.0.type == "opaque"
          - '"opaque_secret.txt" in _describe.resources.0.data'
          - _describe.resources.0.data['opaque_secret.txt'] | b64decode == lookup('file', 'opaque_secret.txt')

    - name: Create secret using wrong file format
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: secret-from-file-01
        type: generic
        from_path: "opaque@secret.txt"
      ignore_errors: true
      register: _create

    - name: Validate that task failed
      assert:
        that:
          - _create is failed
          - "'opaque@secret.txt is not valid key name for a Secret' in _create.msg"

    - name: Create secret using from_path and override key
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: secret-from-file-01
        type: generic
        from_path:
          name: opaque-secret
          path: "opaque@secret.txt"
      register: _create

    - name: Describe docker secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: secret-from-file-01
        namespace: "{{ secret_namespace }}"
      register: _describe

    - name: Validate secret created
      assert:
        that:
          - _create is changed
          - _describe.resources | length == 1
          - _describe.resources.0.type == "opaque"
          - '"opaque-secret" in _describe.resources.0.data'
          - _describe.resources.0.data['opaque-secret'] | b64decode == lookup('file', 'opaque@secret.txt')

    - name: Create secret from directory
      kubernetes.core.k8s_secret:
        namespace: "{{ secret_namespace }}"
        name: secret-from-dir
        type: generic
        from_path: files/secrets
      register: _create

    - name: Describe docker secret
      kubernetes.core.k8s_info:
        kind: Secret
        name: secret-from-dir
        namespace: "{{ secret_namespace }}"
      register: _describe

    - name: Validate secret created
      assert:
        that:
          - _create is changed
          - _describe.resources | length == 1
          - _describe.resources.0.type == "opaque"
          - '"key1.txt" in _describe.resources.0.data'
          - '"key2.txt" in _describe.resources.0.data'
          - '"key3.txt" in _describe.resources.0.data'
          - _describe.resources.0.data['key1.txt'] | b64decode == lookup('file', 'secrets/key1.txt')
          - _describe.resources.0.data['key2.txt'] | b64decode == lookup('file', 'secrets/key2.txt')
          - _describe.resources.0.data['key3.txt'] | b64decode == lookup('file', 'secrets/key3.txt')

  always:
    - name: Remove namespace
      k8s:
        kind: Namespace
        name: "{{ secret_namespace }}"
        state: absent
      ignore_errors: true

    - name: Delete temporary directory
      file:
        state: absent
        path: "{{ _tmp_dir.path }}"
      when: _tmp_dir.path is defined
      ignore_errors: true
