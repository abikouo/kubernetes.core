---
- block:
    - set_fact:
        patch_only_namespace: "{{ test_namespace }}"

    - name: Ensure namespace {{ patch_only_namespace[0] }} exist
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ patch_only_namespace[0] }}"
            labels:
              existingLabel: "labelValue"
            annotations:
              existingAnnotation: "annotationValue"
        wait: yes

    - name: Ensure namespace {{ patch_only_namespace[1] }} does not exist
      kubernetes.core.k8s_info:
        kind: namespace
        name: "{{ patch_only_namespace[1] }}"
      register: second_namespace

    - name: assert that second namespace does not exist
      assert:
        that:
          - second_namespace.resources | length == 0

    - name: apply patch on existing resource
      kubernetes.core.k8s:
        state: patched
        wait: yes
        definition: |
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ patch_only_namespace[0] }}"
            labels:
              ansible: patched
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ patch_only_namespace[1] }}"
            labels:
              ansible: patched
      register: patch_resource

    - name: assert that patch succeed
      assert:
        that:
          - patch_resource.changed
          - patch_resource.result.results | selectattr('warnings', 'defined') | list | length == 1

    - name: Ensure namespace {{ patch_only_namespace[0] }} was patched correctly
      kubernetes.core.k8s_info:
        kind: namespace
        name: "{{ patch_only_namespace[0] }}"
      register: first_namespace

    - name: assert labels are as expected
      assert:
        that:
          - first_namespace.resources[0].metadata.labels.ansible == "patched"
          - first_namespace.resources[0].metadata.labels.existingLabel == "labelValue"
          - first_namespace.resources[0].metadata.annotations.existingAnnotation == "annotationValue"
    - name: Ensure namespace {{ patch_only_namespace[1] }} was not created
      kubernetes.core.k8s_info:
        kind: namespace
        name: "{{ patch_only_namespace[1] }}"
      register: second_namespace

    - name: assert that second namespace does not exist
      assert:
        that:
          - second_namespace.resources | length == 0

    - name: patch all resources (create if does not exist)
      kubernetes.core.k8s:
        state: present
        definition: |
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ patch_only_namespace[0] }}"
            labels:
              patch: ansible
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ patch_only_namespace[1] }}"
            labels:
              patch: ansible
        wait: yes
      register: patch_resource

    - name: Ensure namespace {{ patch_only_namespace[1] }} was created
      kubernetes.core.k8s_info:
        kind: namespace
        name: "{{ patch_only_namespace[1] }}"
      register: second_namespace

    - name: assert that second namespace exist
      assert:
        that:
          - second_namespace.resources | length == 1

    # test Patch for all resources from namespace
    - name: Create deployments
      k8s:
        namespace: "{{ patch_only_namespace[0] }}"
        src: files/deployments.yaml
        wait: true
      register: result

    - name: Patch all deployments using label_selectors
      k8s:
        namespace: "{{ patch_only_namespace[0] }}"
        kind: Deployment
        api_version: apps/v1
        label_selectors:
          - context=ansible
        state: patched
        definition:
          metadata:
            labels:
              patched: "true"
      register: _patch

    - name: Ensure task is changed
      assert:
        that:
          - _patch is changed

    - name: Retrieve deployments
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ patch_only_namespace[0] }}"
        label_selectors:
          - context=ansible
      register: _deployments
      failed_when: _deployments.resources | length != 3

    - name: Ensure all deployments were patched
      assert:
        that:
          - '"patched" in item.metadata.labels'
          - 'item.metadata.labels.patched == "true"'
      with_items: "{{ _deployments.resources }}"

    - name: Trying to patch using select_all=true but missing resource type
      k8s:
        namespace: "{{ patch_only_namespace[0] }}"
        api_version: apps/v1
        select_all: true
        state: patched
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: container2
                    image: redis
      register: _patch
      ignore_errors: true

    - name: assert task failed with proper message
      assert:
        that:
          - _patch is failed
          - _patch.msg == "'kind' option is required to sepcify the resource type."

    - name: Patch all deployments using select_all=true
      k8s:
        namespace: "{{ patch_only_namespace[0] }}"
        kind: Deployment
        api_version: apps/v1
        select_all: true
        state: patched
        definition:
          spec:
            template:
              spec:
                containers:
                  - name: container2
                    image: redis
      register: _patch

    - name: Ensure task is changed
      assert:
        that:
          - _patch is changed

    - name: Retrieve deployments
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ patch_only_namespace[0] }}"
        label_selectors:
          - context=ansible
      register: _deployments
      failed_when: _deployments.resources | length != 3

    - name: Ensure all deployments were patched
      assert:
        that:
          - item.spec.template.spec.containers | length == 2
          - '"container2" in item.spec.template.spec.containers | map(attribute="name") | list'
      with_items: "{{ _deployments.resources }}"

    - name: Patch deployment using select_all=true and name (should patched only specified deployment)
      k8s:
        namespace: "{{ patch_only_namespace[0] }}"
        kind: Deployment
        api_version: apps/v1
        select_all: true
        state: patched
        definition:
          metadata:
            name: alpine
          spec:
            template:
              spec:
                containers:
                  - name: container3
                    image: httpd
      register: _patch

    - name: Ensure task is changed
      assert:
        that:
          - _patch is changed

    - name: Ensure only alpine deployment was patched
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ patch_only_namespace[0] }}"
        name: "{{ item.name }}"
      register: _deployment
      failed_when: _deployment.resources.0.spec.template.spec.containers | length != item.containers
      with_items:
        - name: alpine
          containers: 3
        - name: openjdk
          containers: 2
        - name: nginx
          containers: 2

  always:
    - name: Remove namespace
      kubernetes.core.k8s:
        kind: Namespace
        name: "{{ item }}"
        state: absent
      with_items:
        - "{{ patch_only_namespace[0] }}"
        - "{{ patch_only_namespace[1] }}"
      ignore_errors: true
