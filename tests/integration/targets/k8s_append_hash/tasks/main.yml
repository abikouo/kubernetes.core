---
- block:
    - name: Ensure that append_hash namespace exists
      kubernetes.core.k8s:
        kind: Namespace
        name: "{{ test_namespace }}"

    - name: Create k8s_resource variable
      ansible.legacy.set_fact:
        k8s_resource:
          metadata:
            name: config-map-test
            namespace: "{{ test_namespace }}"
          apiVersion: v1
          kind: ConfigMap
          data:
            hello: world

    - name: Create config map
      kubernetes.core.k8s:
        definition: "{{ k8s_resource }}"
        append_hash: yes
      register: k8s_configmap1

    - name: Check configmap is created with a hash
      ansible.builtin.assert:
        that:
          - k8s_configmap1 is changed
          - k8s_configmap1.result.metadata.name != 'config-map-test'
          - k8s_configmap1.result.metadata.name[:-10] == 'config-map-test-'

    - name: Recreate same config map
      kubernetes.core.k8s:
        definition: "{{ k8s_resource }}"
        append_hash: yes
      register: k8s_configmap2

    - name: Check configmaps are different
      ansible.builtin.assert:
        that:
          - k8s_configmap2 is not changed
          - k8s_configmap1.result.metadata.name == k8s_configmap2.result.metadata.name

    - name: Add key to config map
      kubernetes.core.k8s:
        definition:
          metadata:
            name: config-map-test
            namespace: "{{ test_namespace }}"
          apiVersion: v1
          kind: ConfigMap
          data:
            hello: world
            another: value
        append_hash: yes
      register: k8s_configmap3

    - name: Check configmaps are different
      ansible.builtin.assert:
        that:
          - k8s_configmap3 is changed
          - k8s_configmap1.result.metadata.name != k8s_configmap3.result.metadata.name

  always:
    - name: Ensure that namespace is removed
      kubernetes.core.k8s:
        kind: Namespace
        name: "{{ test_namespace }}"
        state: absent
