---
- name: Create temporary directory
  ansible.builtin.tempfile:
    state: directory
    suffix: .helm
  register: _dir

- name: Install helm binary
  when: test_helm_version is defined
  block:
    - name: "Install {{ test_helm_version }}"
      include_role:
        name: install_helm
      vars:
        helm_version: "{{ test_helm_version }}"

- name: Set saved_kubeconfig_path variable
  ansible.builtin.set_fact:
    saved_kubeconfig_path: "{{ _dir.path }}/config"

- name: Run tests
  vars:
    helm_repo_name: autoscaler
    helm_repo_url: "https://kubernetes.github.io/autoscaler"
    helm_release_name: "autoscaler"
    helm_chart_name: "cluster-autoscaler"
  block:
    - name: Copy default kubeconfig
      ansible.builtin.copy:
        remote_src: true
        src: "{{ default_kubeconfig_path }}"
        dest: "{{ saved_kubeconfig_path }}"

    - name: Delete default kubeconfig
      ansible.builtin.file:
        path: "{{ default_kubeconfig_path }}"
        state: absent

    # helm_plugin and helm_plugin_info
    - name: Install subenv plugin
      kubernetes.core.helm_plugin:
        binary_path: "{{ helm_binary }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        state: present
        plugin_path: https://github.com/hydeenoble/helm-subenv
      register: plugin

    - name: Ensure module reported change
      ansible.builtin.assert:
        that:
          - plugin is changed

    - name: Gather info about all plugin
      kubernetes.core.helm_plugin_info:
        binary_path: "{{ helm_binary }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
      register: plugin_info

    - name: Assert that plugin list is not empty
      ansible.builtin.assert:
        that:
          - '"plugin_list" in plugin_info'
          - plugin_info.plugin_list != []

    # helm_repository, helm, helm_info
    - name: 'Add "{{ helm_repo_name }}" chart repository'
      kubernetes.core.helm_repository:
        binary_path: "{{ helm_binary }}"
        name: "{{ helm_repo_name }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        repo_url: "{{ helm_repo_url }}"
      register: repository

    - name: Assert that repository was added
      ansible.builtin.assert:
        that:
          - repository is changed

    - name: Install chart from repository added before
      kubernetes.core.helm:
        binary_path: "{{ helm_binary }}"
        name: "{{ helm_release_name }}"
        chart_ref: "{{ helm_repo_name }}/{{ helm_chart_name }}"
        namespace: "{{ helm_namespace }}"
        update_repo_cache: true
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        create_namespace: true
      register: deploy

    - name: Assert chart was successfully deployed
      ansible.builtin.assert:
        that:
          - deploy is changed

    - name: Get chart content
      kubernetes.core.helm_info:
        binary_path: "{{ helm_binary }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        name: "{{ helm_release_name }}"
        namespace: "{{ helm_namespace }}"
      register: chart_info

    - name: Assert chart was successfully deployed
      ansible.builtin.assert:
        that:
          - '"status" in chart_info'
          - chart_info.status.status is defined
          - chart_info.status.status == "deployed"

    - name: Remove chart
      kubernetes.core.helm:
        binary_path: "{{ helm_binary }}"
        name: "{{ helm_release_name }}"
        namespace: "{{ helm_namespace }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        state: absent
      register: remove_chart

    - name: Assert chart was successfully removed
      ansible.builtin.assert:
        that:
          - remove_chart is changed

    - name: Get chart content
      kubernetes.core.helm_info:
        binary_path: "{{ helm_binary }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        name: "{{ helm_release_name }}"
        namespace: "{{ helm_namespace }}"
      register: chart_info

    - name: Assert chart was successfully deployed
      ansible.builtin.assert:
        that:
          - '"status" not in chart_info'

    - name: Remove chart repository
      kubernetes.core.helm_repository:
        binary_path: "{{ helm_binary }}"
        name: "{{ helm_repo_name }}"
        kubeconfig: "{{ test_kubeconfig | default(omit) }}"
        validate_certs: "{{ test_validate_certs | default(omit) }}"
        ca_cert: "{{ test_ca_cert | default(omit) }}"
        state: absent
      register: remove

    - name: Assert that repository was removed
      ansible.builtin.assert:
        that:
          - remove is changed

  always:
    - name: Return kubeconfig
      ansible.builtin.copy:
        remote_src: true
        src: "{{ saved_kubeconfig_path }}"
        dest: "{{ default_kubeconfig_path }}"
      failed_when: false

    - name: Delete temporary directory
      ansible.builtin.file:
        path: "{{ _dir.path }}"
        state: absent
      failed_when: false

    - name: Delete temporary directory for helm install
      ansible.builtin.file:
        path: "{{ _helm_install.path }}"
        state: absent
      failed_when: false
      when: _helm_install is defined

    - name: Remove subenv plugin
      helm_plugin:
        binary_path: "{{ helm_binary }}"
        plugin_name: subenv
        state: absent
      failed_when: false

    - name: Delete namespace
      k8s:
        kind: Namespace
        name: "{{ helm_namespace }}"
      failed_when: false

    - name: Delete helm repository
      helm_repository:
        binary_path: "{{ helm_binary }}"
        name: "{{ helm_repo_name }}"
        state: absent
      failed_when: false
